@page
@model CyprusTaxCalculator.UI.Pages.IndexModel
@{
    ViewData["Title"] = "Cyprus Tax Calculator";
}

<h1>Cyprus Tax Calculator</h1>

<form id="taxForm">
    <div class="mb-3">
        <label class="form-label">Annual Income (€)</label>
        <input type="number" step="0.01" class="form-control calc-input" id="income" required />
    </div>
    <div class="mb-3">
        <label class="form-label">Life Insurance Premiums Paid (€)</label>
        <input type="number" step="0.01" class="form-control calc-input" id="life" required />
    </div>
    <div class="mb-3">
        <label class="form-label">Other Deductions (€)</label>
        <input type="number" step="0.01" class="form-control calc-input" id="other" required />
    </div>
</form>

<hr />
<div id="results" style="display:none;">
    <h3>Results</h3>
    <p><strong>Taxable Income:</strong> €<span id="taxable"></span></p>
    <p><strong>Total Tax Payable:</strong> €<span id="tax"></span></p>
    <p><strong>Tax Savings from Life Insurance:</strong> €<span id="savings"></span></p>

    <div id="breakdown-section" style="margin-top: 30px;">
        <h4>Tax Breakdown by Bracket</h4>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Income from (€)</th>
                    <th>Income to (€)</th>
                    <th>Rate (%)</th>
                    <th>Taxed Amount (€)</th>
                    <th>Tax (€)</th>
                </tr>
            </thead>
            <tbody id="breakdown-body">
                <!-- Rows added by JS -->
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
<script>
async function calculateTax() {
    const income = parseFloat(document.getElementById("income").value) || 0;
    const life = parseFloat(document.getElementById("life").value) || 0;
    const other = parseFloat(document.getElementById("other").value) || 0;

    if (income === 0 && life === 0 && other === 0) {
        document.getElementById("results").style.display = "none";
        return;
    }

    try {
        const response = await fetch("/Index", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                AnnualIncome: income,
                LifeInsurancePaid: life,
                OtherDeductions: other
            })
        });

        if (!response.ok) throw new Error("Failed to calculate tax");

        const result = await response.json();

        document.getElementById("taxable").textContent = result.taxableIncome.toFixed(2);
        document.getElementById("tax").textContent = result.taxPayable.toFixed(2);
        document.getElementById("savings").textContent = result.savings.toFixed(2);

        const breakdownBody = document.getElementById("breakdown-body");
        breakdownBody.innerHTML = "";

        result.breakdown.forEach(bracket => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${bracket.lowerLimit.toFixed(2)}</td>
                <td>${bracket.upperLimit !== null ? bracket.upperLimit.toFixed(2) : 'And up'}</td>
                <td>${(bracket.rate * 100).toFixed(2)}%</td>
                <td>${bracket.taxedAmount.toFixed(2)}</td>
                <td>${bracket.tax.toFixed(2)}</td>
            `;
            breakdownBody.appendChild(row);
        });

        document.getElementById("results").style.display = "block";
    } catch (error) {
        console.error("Error:", error);
    }
}

document.querySelectorAll(".calc-input").forEach(input => {
    input.addEventListener("input", calculateTax);
});
</script>
}